// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: Protos/service.proto
// </auto-generated>
// Original file comments:
// set the language version
#pragma warning disable 0414, 1591, 8981, 0612
#region Designer generated code

using grpc = global::Grpc.Core;

namespace Services {
  /// <summary>
  ///this will translate into service and service client stubs
  /// </summary>
  public static partial class TrafficLight
  {
    static readonly string __ServiceName = "Services.TrafficLight";

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static void __Helper_SerializeMessage(global::Google.Protobuf.IMessage message, grpc::SerializationContext context)
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (message is global::Google.Protobuf.IBufferMessage)
      {
        context.SetPayloadLength(message.CalculateSize());
        global::Google.Protobuf.MessageExtensions.WriteTo(message, context.GetBufferWriter());
        context.Complete();
        return;
      }
      #endif
      context.Complete(global::Google.Protobuf.MessageExtensions.ToByteArray(message));
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static class __Helper_MessageCache<T>
    {
      public static readonly bool IsBufferMessage = global::System.Reflection.IntrospectionExtensions.GetTypeInfo(typeof(global::Google.Protobuf.IBufferMessage)).IsAssignableFrom(typeof(T));
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static T __Helper_DeserializeMessage<T>(grpc::DeserializationContext context, global::Google.Protobuf.MessageParser<T> parser) where T : global::Google.Protobuf.IMessage<T>
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (__Helper_MessageCache<T>.IsBufferMessage)
      {
        return parser.ParseFrom(context.PayloadAsReadOnlySequence());
      }
      #endif
      return parser.ParseFrom(context.PayloadAsNewBuffer());
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Services.Empty> __Marshaller_Services_Empty = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Services.Empty.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Services.IntMsg> __Marshaller_Services_IntMsg = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Services.IntMsg.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Services.GetLightStateOutput> __Marshaller_Services_GetLightStateOutput = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Services.GetLightStateOutput.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Services.CarDesc> __Marshaller_Services_CarDesc = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Services.CarDesc.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Services.BoolMsg> __Marshaller_Services_BoolMsg = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Services.BoolMsg.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Services.PassAttemptResult> __Marshaller_Services_PassAttemptResult = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Services.PassAttemptResult.Parser));

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Services.Empty, global::Services.IntMsg> __Method_GetUniqueId = new grpc::Method<global::Services.Empty, global::Services.IntMsg>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetUniqueId",
        __Marshaller_Services_Empty,
        __Marshaller_Services_IntMsg);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Services.Empty, global::Services.GetLightStateOutput> __Method_GetLightState = new grpc::Method<global::Services.Empty, global::Services.GetLightStateOutput>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetLightState",
        __Marshaller_Services_Empty,
        __Marshaller_Services_GetLightStateOutput);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Services.CarDesc, global::Services.BoolMsg> __Method_Queue = new grpc::Method<global::Services.CarDesc, global::Services.BoolMsg>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Queue",
        __Marshaller_Services_CarDesc,
        __Marshaller_Services_BoolMsg);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Services.IntMsg, global::Services.BoolMsg> __Method_IsFirstInLine = new grpc::Method<global::Services.IntMsg, global::Services.BoolMsg>(
        grpc::MethodType.Unary,
        __ServiceName,
        "IsFirstInLine",
        __Marshaller_Services_IntMsg,
        __Marshaller_Services_BoolMsg);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Services.CarDesc, global::Services.PassAttemptResult> __Method_Pass = new grpc::Method<global::Services.CarDesc, global::Services.PassAttemptResult>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Pass",
        __Marshaller_Services_CarDesc,
        __Marshaller_Services_PassAttemptResult);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Services.ServiceReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of TrafficLight</summary>
    [grpc::BindServiceMethod(typeof(TrafficLight), "BindService")]
    public abstract partial class TrafficLightBase
    {
      /// <summary>
      ///these will translate into a service operations
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Services.IntMsg> GetUniqueId(global::Services.Empty request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Services.GetLightStateOutput> GetLightState(global::Services.Empty request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Services.BoolMsg> Queue(global::Services.CarDesc request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Services.BoolMsg> IsFirstInLine(global::Services.IntMsg request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Services.PassAttemptResult> Pass(global::Services.CarDesc request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    public static grpc::ServerServiceDefinition BindService(TrafficLightBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_GetUniqueId, serviceImpl.GetUniqueId)
          .AddMethod(__Method_GetLightState, serviceImpl.GetLightState)
          .AddMethod(__Method_Queue, serviceImpl.Queue)
          .AddMethod(__Method_IsFirstInLine, serviceImpl.IsFirstInLine)
          .AddMethod(__Method_Pass, serviceImpl.Pass).Build();
    }

    /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    public static void BindService(grpc::ServiceBinderBase serviceBinder, TrafficLightBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_GetUniqueId, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Services.Empty, global::Services.IntMsg>(serviceImpl.GetUniqueId));
      serviceBinder.AddMethod(__Method_GetLightState, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Services.Empty, global::Services.GetLightStateOutput>(serviceImpl.GetLightState));
      serviceBinder.AddMethod(__Method_Queue, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Services.CarDesc, global::Services.BoolMsg>(serviceImpl.Queue));
      serviceBinder.AddMethod(__Method_IsFirstInLine, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Services.IntMsg, global::Services.BoolMsg>(serviceImpl.IsFirstInLine));
      serviceBinder.AddMethod(__Method_Pass, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Services.CarDesc, global::Services.PassAttemptResult>(serviceImpl.Pass));
    }

  }
}
#endregion
